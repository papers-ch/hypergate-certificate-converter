(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{134:function(e,t,n){"use strict";n.r(t);var o=n(138),r=n(137),i=(n(139),n(140)),s=Object(i.a)(r.a,o.render,o.staticRenderFns,!1,null,null,null),c=n(141);c.install(n(0)),c.compatible&&(e.hot.accept(),e.hot.data?c.reload("4df3a3d2",s.options):c.createRecord("4df3a3d2",s.options),e.hot.accept(138,function(e){o=n(138),c.rerender("4df3a3d2",{render:o.render,staticRenderFns:o.staticRenderFns})})),s.options.__file="src/converter.vue",t.default=s.exports},135:function(e,t,n){var o=n(136);"string"==typeof o&&(o=[[e.i,o,""]]),o.locals&&(e.exports=o.locals);var r=(0,n(66).default)("8cd109c2",o,!1,{});o.locals||e.hot.accept(136,function(){var t=n(136);"string"==typeof t&&(t=[[e.i,t,""]]),r(t)}),e.hot.dispose(function(){r()})},136:function(e,t,n){(t=e.exports=n(65)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto+Mono);",""]),t.push([e.i,"\n* {\n  font-family: 'Roboto Mono', monospace;\n}\n",""])},137:function(e,t,n){"use strict";var o=n(16),r={components:{"el-button":o.Button,"el-input":o.Input,"el-upload":o.Upload},methods:{copy:function(){this.$refs.text.select(),document.execCommand("copy"),Object(o.Message)({message:"Copied to your clipboard.",type:"success"})},convertKrb5:function(e){return window.btoa(e)},convert:function(e,t){var n=this;if(t&&t.length&&0!==t.length){var r=t[0].raw,i=new FileReader;i.onload=function(e){for(var t="",r=new Uint8Array(e.target.result),i=r.byteLength,s=0;s<i;s++)t+=String.fromCharCode(r[s]);n.convertedConfiguration=n.convertKrb5(t),Object(o.Message)({message:"krb5.conf file converted.",type:"success"})},i.readAsArrayBuffer(r)}else this.convertedConfiguration=this.convertKrb5(this.rawKrb5),Object(o.Message)({message:"krb5.conf file converted.",type:"success"})}},data:function(){return{files:[],isSaving:!1,rawKrb5:null,convertedConfiguration:""}}};t.a=r},138:function(e,t,n){"use strict";n.r(t);var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",[e._v("Hypergate Kerberos krb5.conf Converter")]),e._v(" "),n("el-upload",{attrs:{action:"","on-change":e.convert,"auto-upload":!1,single:"",limit:1}},[n("el-button",{attrs:{size:"small",type:"primary"}},[e._v("Select krb5.conf File")]),e._v(" "),n("div",{staticClass:"el-upload__tip",attrs:{slot:"tip"},slot:"tip"},[e._v("krb5.conf Kerberos Configuration File")])],1),e._v(" "),n("p",[e._v("- or -")]),e._v(" "),n("el-input",{ref:"text",attrs:{type:"textarea",rows:10},model:{value:e.rawKrb5,callback:function(t){e.rawKrb5=t},expression:"rawKrb5"}}),e._v(" "),n("br"),e._v(" "),n("br"),e._v(" "),n("el-button",{on:{click:function(t){e.convert()}}},[e._v("Convert")]),e._v(" "),e.convertedConfiguration.length>0?n("div",[n("h2",[e._v("Converted krb5.conf for ManagedConfig")]),e._v(" "),n("el-input",{ref:"text",attrs:{type:"textarea",readonly:"",rows:10},model:{value:e.convertedConfiguration,callback:function(t){e.convertedConfiguration=t},expression:"convertedConfiguration"}}),e._v(" "),n("br"),e._v(" "),n("br"),e._v(" "),n("el-button",{attrs:{disabled:0===e.convertedConfiguration.length},on:{click:function(t){e.copy()}}},[e._v("Copy")])],1):e._e()],1)},r=[];o._withStripped=!0,n.d(t,"render",function(){return o}),n.d(t,"staticRenderFns",function(){return r})},139:function(e,t,n){"use strict";var o=n(135);n.n(o).a},140:function(e,t,n){"use strict";function o(e,t,n,o,r,i,s,c){var a,d="function"==typeof e?e.options:e;if(t&&(d.render=t,d.staticRenderFns=n,d._compiled=!0),o&&(d.functional=!0),i&&(d._scopeId="data-v-"+i),s?(a=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},d._ssrRegister=a):r&&(a=c?function(){r.call(this,this.$root.$options.shadowRoot)}:r),a)if(d.functional){d._injectStyles=a;var l=d.render;d.render=function(e,t){return a.call(t),l(e,t)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,a):[a]}return{exports:e,options:d}}n.d(t,"a",function(){return o})},141:function(e,t){var n,o,r=Object.create(null);"undefined"!=typeof window&&(window.__VUE_HOT_MAP__=r);var i=!1,s="beforeCreate";function c(e,t){if(t.functional){var n=t.render;t.render=function(t,o){var i=r[e].instances;return o&&i.indexOf(o.parent)<0&&i.push(o.parent),n(t,o)}}else a(t,s,function(){var t=r[e];t.Ctor||(t.Ctor=this.constructor),t.instances.push(this)}),a(t,"beforeDestroy",function(){var t=r[e].instances;t.splice(t.indexOf(this),1)})}function a(e,t,n){var o=e[t];e[t]=o?Array.isArray(o)?o.concat(n):[o,n]:[n]}function d(e){return function(t,n){try{e(t,n)}catch(e){console.error(e),console.warn("Something went wrong during Vue component hot-reload. Full reload required.")}}}function l(e,t){for(var n in e)n in t||delete e[n];for(var o in t)e[o]=t[o]}t.install=function(e,r){i||(i=!0,n=e.__esModule?e.default:e,o=n.version.split(".").map(Number),r,n.config._lifecycleHooks.indexOf("init")>-1&&(s="init"),t.compatible=o[0]>=2,t.compatible||console.warn("[HMR] You are using a version of vue-hot-reload-api that is only compatible with Vue.js core ^2.0.0."))},t.createRecord=function(e,t){if(!r[e]){var n=null;"function"==typeof t&&(t=(n=t).options),c(e,t),r[e]={Ctor:n,options:t,instances:[]}}},t.isRecorded=function(e){return void 0!==r[e]},t.rerender=d(function(e,t){var n=r[e];if(t){if("function"==typeof t&&(t=t.options),n.Ctor)n.Ctor.options.render=t.render,n.Ctor.options.staticRenderFns=t.staticRenderFns,n.instances.slice().forEach(function(e){e.$options.render=t.render,e.$options.staticRenderFns=t.staticRenderFns,e._staticTrees&&(e._staticTrees=[]),Array.isArray(n.Ctor.options.cached)&&(n.Ctor.options.cached=[]),Array.isArray(e.$options.cached)&&(e.$options.cached=[]),e.$forceUpdate()});else if(n.options.render=t.render,n.options.staticRenderFns=t.staticRenderFns,n.options.functional){if(Object.keys(t).length>2)l(n.options,t);else{var o=n.options._injectStyles;if(o){var i=t.render;n.options.render=function(e,t){return o.call(t),i(e,t)}}}n.options._Ctor=null,Array.isArray(n.options.cached)&&(n.options.cached=[]),n.instances.slice().forEach(function(e){e.$forceUpdate()})}}else n.instances.slice().forEach(function(e){e.$forceUpdate()})}),t.reload=d(function(e,t){var n=r[e];if(t)if("function"==typeof t&&(t=t.options),c(e,t),n.Ctor){o[1]<2&&(n.Ctor.extendOptions=t);var i=n.Ctor.super.extend(t);n.Ctor.options=i.options,n.Ctor.cid=i.cid,n.Ctor.prototype=i.prototype,i.release&&i.release()}else l(n.options,t);n.instances.slice().forEach(function(e){e.$vnode&&e.$vnode.context?e.$vnode.context.$forceUpdate():console.warn("Root or manually mounted instance modified. Full reload required.")})})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,